name: automerge

permissions:
  contents: write
  pull-requests: write
  statuses: write

on:
  pull_request:
    branches: [staging, canary, main]
    types:
      - opened
      - edited
      - reopened

  pull_request_review:
    types:
      - submitted
  check_run:
    types:
      - completed
  check_suite:
    types:
      - completed
  status: ~

concurrency:
  group: automerge

jobs:
  find-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Find matching, mergeable PR
        uses: actions/github-script@v7
        id: find-pr
        with:
          script: |
            console.log(`Triggered by event name: ${context.eventName}`);
            const isPullRequestEvent = ["pull_request", "pull_request_review"].includes(context.eventName);
            const targetBranches = ["staging", "canary", "main"];

            let pr;
            if (isPullRequestEvent) {
              pr = context.payload.pull_request;
            } else {
              const openPRs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "open",
              });
              pr = openPRs.data.find(pr => pr.head.sha == context.sha);
            }
            if (pr) {
              pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
              });
              pr = pr.data;
            } else {
              console.log(`No open PRs found for ${context.sha}`);
              return false;
            }
            console.log(`Found PR: ${pr.url}\nBase ref: ${pr.base.ref}; Head SHA: ${pr.head.sha}; Context SHA: ${context.sha}`);
            console.log(`Rebaseable: ${pr.rebaseable}; Mergeable state: ${pr.mergeable_state}`);
            return (targetBranches.includes(pr.base.ref) && pr.rebaseable && pr.mergeable_state == "clean") ? pr : false;
          result-encoding: json
    outputs:
      result: ${{ steps.find-pr.outputs.result }}

  merge-ff-only:
    needs: find-pr
    if: ${{ fromJSON(needs.find-pr.outputs.result) != false }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ fromJSON(needs.find-pr.outputs.result).base.ref }}
          fetch-depth: 0 # fetch all history so that git merge --ff-only can work
      - name: Merge PR and update promotion status
        uses: actions/github-script@v7
        id: merge
        with:
          script: |
            const pr = ${{ needs.find-pr.outputs.result }};
            console.log(`Promoting ${context.sha} from ${pr.head.ref} to ${pr.base.ref}`)

            // Merge PR with --ff-only
            await exec.exec('git', ['merge', '--ff-only', `origin/${pr.head.ref}`]);
            await exec.exec('git', ['push', 'origin', pr.base.ref]);

            // Update promotion status on commit
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              context: "promoted-to-${pr.base.ref}",
              description: "Promoted from ${pr.head.ref} to ${pr.base.ref}\n\n${pr.url}",
            });
            return pr.base.ref;
          result-encoding: string
    outputs:
      result: ${{ steps.merge.outputs.result }}
  # Trigger onward promotion
  promote:
    needs: [merge-ff-only]
    uses: ./.github/workflows/promote.yaml
    with:
      stages: '["develop", "staging:auto", "canary", "main"]'
      source: ${{ needs.merge-ff-only.outputs.result }}
