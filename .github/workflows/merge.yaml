name: automerge

permissions:
  contents: write
  pull-requests: read
  statuses: write

on:
  pull_request:
    branches: [staging, canary, main]
    types:
      - opened
      - edited
      - reopened

  pull_request_review:
    types:
      - submitted
  check_run:
    types:
      - completed
  check_suite:
    types:
      - completed
  status: ~

concurrency:
  group: automerge

jobs:
  find-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Find matching, mergeable PR
        uses: actions/github-script@v7
        id: find-pr
        with:
          script: |
            const openPRs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
            });
            let pr = openPRs.data.find(pr => ['staging', 'canary', 'main'].includes(pr.base.ref) &&  pr.head.sha === context.sha);
            if (typeof pr !== 'undefined' && pr.rebaseable && pr.mergeable_state === "clean") {
              return pr;
            }
            return false;
    outputs:
      result: ${{ steps.find-pr.outputs.result }}

  merge-ff-only:
    needs: find-pr
    if: ${{ fromJSON(needs.find-pr.outputs.result) != false }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ fromJSON(needs.find-pr.outputs.result).base.ref }}
          fetch-depth: 1
      - name: Merge PR and update promotion status
        uses: actions/github-script@v7
        with:
          script: |
            const exec = require('@actions/exec');
            const pr = ${{ fromJSON(needs.find-pr.outputs.result) }};
            console.log(`Promoting ${context.sha} from ${pr.head.ref} to ${pr.base.ref}`)

            // Merge PR with --ff-only
            await exec.exec('git', ['merge', '--ff-only', pr.head.ref]);
            await exec.exec('git', ['push', 'origin', pr.base.ref]);

            // Update promotion status on commit
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              context: "promoted-to-${pr.base.ref}",
              description: "Promoted from ${pr.head.ref} to ${pr.base.ref}\n\n${pr.url}",
            });
