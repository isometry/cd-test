name: find-promotion-request

on:
  workflow_call:
    inputs:
      targetRefs:
        required: false
        type: string
        default: '["staging", "canary", "production"]'
    outputs:
      result:
        description: The PR that was found
        value: ${{ jobs.find-promotion-request.outputs.result }}

jobs:
  find-promotion-request:
    runs-on: ubuntu-latest
    steps:
      - name: Find matching, mergeable PR
        uses: actions/github-script@v7
        id: find-pr
        env:
          TARGET_REFS: "${{ toJSON(fromJSON(inputs.targetRefs)) }}"
        with:
          script: |
            console.log(`Triggered by event name: ${context.eventName}`);
            const targetRefs = JSON.parse(process.env.TARGET_REFS);

            let pr;
            if (context.eventName === "pull_request_review") {
              pr = context.payload.pull_request;
            } else {
              const openPRs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "open",
              });
              pr = openPRs.data.find(pr => pr.head.sha == context.sha);
            }
            if (pr) {
              pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
              });
              pr = pr.data;
            } else {
              console.log(`No open PRs found for ${context.sha}`);
              return false;
            }
            console.log(`Found PR: ${pr.url}\nBase ref: ${pr.base.ref}; Head SHA: ${pr.head.sha}; Context SHA: ${context.sha}`);
            console.log(`Rebaseable: ${pr.rebaseable}; Mergeable state: ${pr.mergeable_state}`);
            /* mergeable_state:
            *  - clean:    No conflicts, everything good. Merging is allowed (green box).
             * - unstable: Failing/pending commit status that is not part of the required status checks. Merging is allowed (yellow box).
             */
            return (
              targetRefs.includes(pr.base.ref) &&
              pr.rebaseable &&
              ["clean", "unstable"].includes(pr.mergeable_state)
            ) ? pr : false;
          result-encoding: json
    outputs:
      result: ${{ steps.find-pr.outputs.result }}
