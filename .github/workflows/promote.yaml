name: promote

on:
  workflow_call:
    inputs:
      stages:
        required: false
        type: string
        default: '["develop", "staging:auto", "canary", "main"]'
      trigger_ref:
        required: true
        type: string

jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        id: calculate-promotion
        env:
          STAGES: "${{ toJSON(fromJSON(inputs.stages)) }}"
          TRIGGER_REF: "${{ inputs.trigger_ref }}"
        with:
          script: |
            const stages = JSON.parse(process.env.STAGES)
            let triggerRef = process.env.TRIGGER_REF
            if (triggerRef.startsWith("refs/heads/"))
              triggerRef = triggerRef.slice("refs/heads/".length);
            const stagesMap = stages.reduce((map, stage) => {
              const splitStage = stage.split(":");
              map.set(splitStage[0], splitStage[1] ? splitStage[1] === "auto" : false);
              return map;
            }, new Map());
            const stagesArray = Array.from(stagesMap.keys());
            const sourceIndex = stagesArray.indexOf(triggerRef);
            const sourceStage = stagesArray[sourceIndex];
            console.log(`Source stage: ${sourceStage}`)
            const targetIndex = (sourceIndex !== -1 && sourceIndex < stagesArray.length - 1 ) ? sourceIndex + 1 : null;
            const targetStage = targetIndex !== null ? stagesArray[targetIndex] : null;
            console.log(`Target stage: ${targetStage}`)
            if (targetStage !== null) {
              const autoPromote = stagesMap.get(targetStage);
              const openPRs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "open",
                head: "${context.repo.owner}:${sourceStage}",
                base: targetStage,
              });
              console.log(`Open PRs: ${JSON.stringify(openPRs.data)}`)
              if (openPRs.data.length > 0) {
                if (!openPRs.data.find(pr => pr.head.ref === triggerRef)) {
                  const newPR = await github.rest.pulls.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `Promote ${sourceStage} to ${targetStage}${autoPromote ? " (auto)" : ""}}`,
                    head: sourceStage,
                    base: targetStage,
                  });
                  console.log(`Created PR: ${JSON.stringify(newPR.data)}`)
                }
                // cannot enable auto-merge via octokit
              }
              return autoPromote;
            }
            return false;
      - name: Get result
        run: echo "${{steps.calculate-promotion.outputs.result}}"
