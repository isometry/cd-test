name: promote

on:
  workflow_call:
    inputs:
      stages:
        required: false
        type: string
        default: '["develop", "staging:auto", "canary", "main"]'
      trigger_ref:
        required: true
        type: string

jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        id: calculate-promotion
        env:
          STAGES: "${{ toJSON(fromJSON(inputs.stages)) }}"
          TRIGGER_REF: "${{ inputs.trigger_ref }}"
        with:
          github-token: "not-used"
          script: |
            const stages = JSON.parse(process.env.STAGES)
            let triggerRef = process.env.TRIGGER_REF
            if (triggerRef.startsWith("refs/heads/"))
              triggerRef = triggerRef.slice("refs/heads/".length);
            const stagesMap = stages.reduce((map, stage) => {
              const splitStage = stage.split(":");
              map.set(splitStage[0], splitStage[1] ? splitStage[1] === "auto" : false);
              return map;
            }, new Map());
            const stagesArray = Array.from(stagesMap.keys());
            const currentIndex = stagesArray.indexOf(triggerRef);
            const currentStage = stagesArray[currentIndex];
            const targetIndex = (currentIndex !== -1 && currentIndex < stagesArray.length - 1 ) ? currentIndex + 1 : null;
            const targetStage = targetIndex !== null ? stagesArray[targetIndex] : null;
            const autoPromote = targetStage !== null ? stagesMap.get(targetStage) : false;
            const prs = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              base: targetStage,
            });
            const existingPR = prs.data.find(pr => pr.head.ref === triggerRef) ? true : false;
            if (!existingPR && targetStage !== null) {
              const newPR = await github.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Promote ${triggerRef} to ${targetStage}`,
                head: triggerRef,
                base: targetStage,
              });
              autoPromote && await github.pulls.createAutoMerge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: newPR.data.number,
                merge_method: "squash",
              });
            }
            return {
              "triggerRef": triggerRef,
              "currentIndex": currentIndex,
              "currentStage": currentStage,
              "targetIndex": targetIndex,
              "targetStage": targetStage,
              "autoPromote": autoPromote,
            };
          # result-encoding: string
      - name: Get result
        run: echo "${{steps.calculate-promotion.outputs.result}}"
